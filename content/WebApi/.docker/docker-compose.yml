version: '3.4'

services:
    jaeger:
        image: jaegertracing/all-in-one:1.30
        ports:
            - "5775:5775/udp"
            - "6831:6831/udp"
            - "6832:6832/udp"
            - "5778:5778"
            - "16686:16686"
            - "14250:14250"
            - "14268:14268"
            - "14269:14269"
            - "9411:9411"
        environment:
            COLLECTOR_ZIPKIN_HOST_PORT: "9411"
            
#if (postgre)
    postgre:
        image: postgres:12-alpine
        ports:
            - "15432:15432"
            - "5432:5432"
        environment:
            POSTGRES_USER: "admin"
            POSTGRES_PASSWORD: "password"
#endif
#if (mysql)
    mysql:
        image: mysql:8.0.29-oracle
        command: --default-authentication-plugin=mysql_native_password
        ports:
            - "3306:3306"
        environment:
            MYSQL_ROOT_PASSWORD: password
#endif
#if (sqlserver)
    sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
            - "1433:1433"
        environment:
            ACCEPT_EULA: Y
            SA_PASSWORD: P@ssw0rd
#endif
#if (sqs)
    localstack:
        image: localstack/localstack:0.11.2
        ports:
            - "4566:4566"
        environment:
            - SERVICES=sqs
            - AWS_ACCESS_KEY_ID=guest
            - AWS_SECRET_ACCESS_KEY=guest
            - AWS_DEFAULT_REGION=us-east-1

    localstack-create-queues:
        image: amazon/aws-cli:2.0.24
        environment:
            - AWS_ACCESS_KEY_ID=guest
            - AWS_SECRET_ACCESS_KEY=guest
            - AWS_DEFAULT_REGION=us-east-1
            - AWS_ENDPOINT_URL=http://localstack:4576
        depends_on:
            - localstack
        links: ["localstack"]
        hostname: localstack-create-queues
        entrypoint: /bin/sh -c
        command: >
          "
            while ! aws --endpoint-url=http://localstack:4576 sqs list-queues > /dev/null; do echo waiting; sleep 10; done;
            aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name SendToQueueMessageQueue;
            aws --endpoint-url=http://localstack:4576 sqs create-queue --queue-name SendToQueueMessageQueue.fifo --attributes FifoQueue=true;
            aws --endpoint-url=http://localstack:4576 sqs list-queues;
            echo 'SQS-DONE!';
          "
#endif
#if (kafka)
    zookeeper:
        image: confluentinc/cp-zookeeper:5.5.0
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    kafka:
        image: confluentinc/cp-kafka:5.5.0
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
        restart: unless-stopped
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'            
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    kafka-create-topics:
        image: confluentinc/cp-kafka:5.5.0
        depends_on:
            - zookeeper
            - kafka
        entrypoint: /bin/sh -c
        command: >
            "
            cub kafka-ready -b kafka:29092 1 30;
            kafka-topics --create --topic SendToQueueMessageTopic --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1;
            kafka-topics --list --zookeeper zookeeper:2181;
            echo 'KAFKA-DONE!';
            "
#endif
#if (rabbitmq)
    rabbitmq:
        image: rabbitmq:3.8.5-management-alpine
        hostname: rabbitmq
        environment:
            - RABBITMQ_DEFAULT_USER=user
            - RABBITMQ_DEFAULT_PASS=password
        ports:
            - '15672:15672'
            - '5672:5672'

    rabbitmq-create-queues:
        image: activatedgeek/rabbitmqadmin:latest
        depends_on:
            - rabbitmq
        hostname: rabbitmq-create-queues
        entrypoint: /bin/sh -c
        command: >
            "
              while ! nc -z rabbitmq 5672; do echo waiting; sleep 10; done;
              rabbitmqadmin --host rabbitmq -uuser -ppassword declare exchange name=SendToQueueMessageExchange type=fanout;
              rabbitmqadmin --host rabbitmq -uuser -ppassword declare queue name=SendToQueueMessageQueue durable=false;
              rabbitmqadmin --host rabbitmq -uuser -ppassword declare binding source="SendToQueueMessageExchange" destination="SendToQueueMessageQueue" destination_type="queue";
              rabbitmqadmin --host rabbitmq -uuser -ppassword list queues;
              echo 'RABBIT-DONE!';
            "
#endif
#if (azure)
    azurite:
        image: arafato/azurite:2.6.5
        hostname: azurite
        ports:
            - '10000:10000'
            - '10001:10001'
            
    azurite-create-queues:
        image: curlimages/curl:7.84.0
        depends_on:
            - azurite
        hostname: azurite-create-queues
        entrypoint: /bin/sh -c
        command: >
            "
            while ! nc -z azurite 10001; do echo waiting; sleep 10; done;
            curl -X PUT http://azurite:10001/devstoreaccount1/sendtoqueuemessagequeue -i;
            curl -X GET http://azurite:10001/devstoreaccount1?comp=list -i;
            echo 'AZURITE-DONE!';
            "
#endif